(set-info :origin "NTS benchmark converted to SMT-LIB2 using Eldarica (http://lara.epfl.ch/w/eldarica)")
(set-logic HORN)
(declare-fun INV1 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)) (O (_ BitVec 32)) (P (_ BitVec 32)) (Q (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (= (bvadd O (_ bv1 32)) H) (= (bvmul (bvneg (_ bv1 32)) I) (bvneg (_ bv10 32)))) (= (bvadd P Q) J)) (= (bvadd O (bvneg (_ bv10 32))) (_ bv0 32))) (not (bvsge (bvadd (bvsub A C) (bvneg (_ bv1 32))) (_ bv0 32)))) (bvsge (bvadd (bvsub F O) (bvneg (_ bv1 32))) (_ bv0 32))) (INV1 A B C D E F G O Q P K L M N)) (= K M)) (= L N)) (INV1 A B C D E F G H I J K L M N))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)) (O (_ BitVec 32)) (P (_ BitVec 32)) (Q (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (= (bvadd O (_ bv1 32)) H) (= (bvadd P (_ bv5 32)) I)) (= (bvadd Q P) J)) (not (= (bvadd O (bvneg (_ bv10 32))) (_ bv0 32)))) (not (bvsge (bvadd (bvsub A C) (bvneg (_ bv1 32))) (_ bv0 32)))) (bvsge (bvadd (bvsub F O) (bvneg (_ bv1 32))) (_ bv0 32))) (INV1 A B C D E F G O P Q K L M N)) (= K M)) (= L N)) (INV1 A B C D E F G H I J K L M N))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)) (O (_ BitVec 32)) (P (_ BitVec 32)) (Q (_ BitVec 32)) (R (_ BitVec 32)) (S (_ BitVec 32)) (T (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (and (and (and (= (bvadd O (_ bv1 32)) C) (= (bvadd (bvmul (_ bv5 32) O) B) D)) (= (bvadd P (bvadd (bvmul (_ bv5 32) O) B)) E)) (= (bvadd Q (_ bv1 32)) H)) (= (bvmul (bvneg (_ bv1 32)) I) (bvneg (_ bv10 32)))) (= (bvadd R S) J)) (= (bvadd Q (bvneg (_ bv10 32))) (_ bv0 32))) (bvsge (bvadd (bvsub A O) (bvneg (_ bv1 32))) (_ bv0 32))) (bvsge (bvadd (bvsub F Q) (bvneg (_ bv1 32))) (_ bv0 32))) (INV1 A B O T P F G Q S R K L M N)) (= K M)) (= L N)) (INV1 A B C D E F G H I J K L M N))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)) (O (_ BitVec 32)) (P (_ BitVec 32)) (Q (_ BitVec 32)) (R (_ BitVec 32)) (S (_ BitVec 32)) (T (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (and (and (and (= (bvadd O (_ bv1 32)) C) (= (bvadd (bvmul (_ bv5 32) O) B) D)) (= (bvadd P (bvadd (bvmul (_ bv5 32) O) B)) E)) (= (bvadd Q (_ bv1 32)) H)) (= (bvadd R (_ bv5 32)) I)) (= (bvadd S R) J)) (not (= (bvadd Q (bvneg (_ bv10 32))) (_ bv0 32)))) (bvsge (bvadd (bvsub A O) (bvneg (_ bv1 32))) (_ bv0 32))) (bvsge (bvadd (bvsub F Q) (bvneg (_ bv1 32))) (_ bv0 32))) (INV1 A B O T P F G Q R S K L M N)) (= K M)) (= L N)) (INV1 A B C D E F G H I J K L M N))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)) (O (_ BitVec 32)) (P (_ BitVec 32)) (Q (_ BitVec 32)))(=> (and (and (and (and (and (and (and (= (bvadd O (_ bv1 32)) C) (= (bvadd (bvmul (_ bv5 32) O) B) D)) (= (bvadd P (bvadd (bvmul (_ bv5 32) O) B)) E)) (bvsge (bvadd (bvsub A O) (bvneg (_ bv1 32))) (_ bv0 32))) (not (bvsge (bvadd (bvsub F H) (bvneg (_ bv1 32))) (_ bv0 32)))) (INV1 A B O Q P F G H I J K L M N)) (= K M)) (= L N)) (INV1 A B C D E F G H I J K L M N))))
(assert (not (exists ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)))(and (and (and (and (and (not (= A B)) (not (bvsge (bvadd (bvsub C D) (bvneg (_ bv1 32))) (_ bv0 32)))) (not (bvsge (bvadd (bvsub E F) (bvneg (_ bv1 32))) (_ bv0 32)))) (INV1 C G D H A E I F J B K L M N)) (= K M)) (= L N)))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)))(=> (and (and (and (and (and (and (= (bvmul (bvneg (_ bv1 32)) C) (_ bv0 32)) (= (bvmul (bvneg (_ bv1 32)) D) (_ bv0 32))) (= (bvmul (bvneg (_ bv1 32)) E) (_ bv0 32))) (= (bvmul (bvneg (_ bv1 32)) H) (_ bv0 32))) (= (bvmul (bvneg (_ bv1 32)) I) (_ bv0 32))) (= A F)) (= B G)) (INV1 A B C D E F G H G I A B F G))))
(check-sat)
