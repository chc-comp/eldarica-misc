(set-info :origin "NTS benchmark converted to SMT-LIB2 using Eldarica (http://lara.epfl.ch/w/eldarica)")
(set-logic HORN)
(declare-fun INV1 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun INV2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)))(=> (and (and (and (and (and (= (bvadd I (_ bv1 32)) E) (= (bvmul (_ bv5 32) J) F)) (not (bvsge A B))) (bvsge D I)) (INV1 A B C D I J G H)) (= G H)) (INV1 A B C D E F G H))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)))(=> (and (and (and (and (and (and (and (= (bvadd I (_ bv1 32)) B) (= (bvmul (_ bv5 32) J) C)) (= (bvadd K (_ bv1 32)) E)) (= (bvmul (_ bv5 32) L) F)) (bvsge A I)) (bvsge D K)) (INV1 A I J D K L G H)) (= G H)) (INV1 A B C D E F G H))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)))(=> (and (and (and (and (and (= (bvadd I (_ bv1 32)) B) (= (bvmul (_ bv5 32) J) C)) (bvsge A I)) (not (bvsge D E))) (INV1 A I J D E F G H)) (= G H)) (INV1 A B C D E F G H))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)) (O (_ BitVec 32)) (P (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (= (bvadd I (_ bv1 32)) B) (= (bvadd J I) C)) (not (bvsge D E))) (bvsge A I)) (INV2 A I J D E F G H)) (not (bvsge K L))) (not (bvsge M N))) (INV1 K L O M N P G H)) (= G H)) (INV2 A B C D E F G H))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)) (O (_ BitVec 32)) (P (_ BitVec 32)) (Q (_ BitVec 32)) (R (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (and (and (= (bvadd I (_ bv1 32)) B) (= (bvadd J I) C)) (= (bvadd K (_ bv1 32)) E)) (= (bvadd L K) F)) (bvsge D K)) (bvsge A I)) (INV2 A I J D K L G H)) (not (bvsge M N))) (not (bvsge O P))) (INV1 M N Q O P R G H)) (= G H)) (INV2 A B C D E F G H))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)) (O (_ BitVec 32)) (P (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (= (bvadd I (_ bv1 32)) E) (= (bvadd J I) F)) (bvsge D I)) (not (bvsge A B))) (INV2 A B C D I J G H)) (not (bvsge K L))) (not (bvsge M N))) (INV1 K L O M N P G H)) (= G H)) (INV2 A B C D E F G H))))
(assert (not (exists ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)))(and (and (and (and (and (and (and (not (= A B)) (not (bvsge C D))) (not (bvsge E F))) (INV2 E F A C D B G H)) (not (bvsge I J))) (not (bvsge K L))) (INV1 I J M K L N G H)) (= G H)))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)))(=> (and (and (and (and (and (= (bvmul (bvneg (_ bv1 32)) B) (_ bv0 32)) (= (bvmul (bvneg (_ bv1 32)) E) (bvneg (_ bv1 32)))) (not (bvsge A I))) (not (bvsge D J))) (INV1 A I C D J F G H)) (= G H)) (INV2 A B C D E F G H))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)))(=> (and (and (and (and (= (bvmul (bvneg (_ bv1 32)) B) (bvneg (_ bv1 32))) (= (bvmul (bvneg (_ bv1 32)) C) (bvneg (_ bv1 32)))) (= (bvmul (bvneg (_ bv1 32)) E) (bvneg (_ bv1 32)))) (= (bvmul (bvneg (_ bv1 32)) F) (bvneg (_ bv1 32)))) (= A D)) (INV1 A B C D E F A D))))
(check-sat)
