(set-info :origin "NTS benchmark converted to SMT-LIB2 using Eldarica (http://lara.epfl.ch/w/eldarica)")
(set-logic HORN)
(declare-fun INV1 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun INV2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun INV3 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)))(=> (and (and (and (and (and (= (bvadd G (_ bv1 32)) E) (= (bvmul (_ bv1 32) H) F)) (not (bvsge A B))) (bvsge D G)) (INV1 A B C D G H)) (= I J)) (INV1 A B C D E F))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)))(=> (and (and (and (and (and (and (and (= (bvadd G (_ bv1 32)) B) (= (bvmul (_ bv1 32) H) C)) (= (bvadd I (_ bv1 32)) E)) (= (bvmul (_ bv1 32) J) F)) (bvsge A G)) (bvsge D I)) (INV1 A G H D I J)) (= K L)) (INV1 A B C D E F))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)))(=> (and (and (and (and (and (= (bvadd G (_ bv1 32)) B) (= (bvmul (_ bv1 32) H) C)) (bvsge A G)) (not (bvsge D E))) (INV1 A G H D E F)) (= I J)) (INV1 A B C D E F))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)) (O (_ BitVec 32)) (P (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (= (bvadd G (_ bv1 32)) B) (= (bvadd H G) C)) (not (bvsge D E))) (bvsge A G)) (INV2 A G H D E F)) (not (bvsge I J))) (not (bvsge K L))) (INV1 I J M K L N)) (= O P)) (INV2 A B C D E F))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)) (O (_ BitVec 32)) (P (_ BitVec 32)) (Q (_ BitVec 32)) (R (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (and (and (= (bvadd G (_ bv1 32)) B) (= (bvadd H G) C)) (= (bvadd I (_ bv1 32)) E)) (= (bvadd J I) F)) (bvsge D I)) (bvsge A G)) (INV2 A G H D I J)) (not (bvsge K L))) (not (bvsge M N))) (INV1 K L O M N P)) (= Q R)) (INV2 A B C D E F))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)) (O (_ BitVec 32)) (P (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (= (bvadd G (_ bv1 32)) E) (= (bvadd H G) F)) (bvsge D G)) (not (bvsge A B))) (INV2 A B C D G H)) (not (bvsge I J))) (not (bvsge K L))) (INV1 I J M K L N)) (= O P)) (INV2 A B C D E F))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)) (O (_ BitVec 32)) (P (_ BitVec 32)) (Q (_ BitVec 32)) (R (_ BitVec 32)) (S (_ BitVec 32)) (T (_ BitVec 32)) (U (_ BitVec 32)) (V (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (and (and (and (= (bvadd G (_ bv1 32)) E) (= (bvmul (_ bv2 32) H) F)) (not (bvsge A B))) (bvsge D G)) (INV3 A B C D G H)) (not (bvsge I J))) (not (bvsge K L))) (INV2 K L M I J N)) (not (bvsge O P))) (not (bvsge Q R))) (INV1 O P S Q R T)) (= U V)) (INV3 A B C D E F))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)) (O (_ BitVec 32)) (P (_ BitVec 32)) (Q (_ BitVec 32)) (R (_ BitVec 32)) (S (_ BitVec 32)) (T (_ BitVec 32)) (U (_ BitVec 32)) (V (_ BitVec 32)) (W (_ BitVec 32)) (X (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (bvadd G (_ bv1 32)) B) (= (bvmul (_ bv2 32) H) C)) (= (bvadd I (_ bv1 32)) E)) (= (bvmul (_ bv2 32) J) F)) (bvsge A G)) (bvsge D I)) (INV3 A G H D I J)) (not (bvsge K L))) (not (bvsge M N))) (INV2 M N O K L P)) (not (bvsge Q R))) (not (bvsge S T))) (INV1 Q R U S T V)) (= W X)) (INV3 A B C D E F))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)) (O (_ BitVec 32)) (P (_ BitVec 32)) (Q (_ BitVec 32)) (R (_ BitVec 32)) (S (_ BitVec 32)) (T (_ BitVec 32)) (U (_ BitVec 32)) (V (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (and (and (and (= (bvadd G (_ bv1 32)) B) (= (bvmul (_ bv2 32) H) C)) (bvsge A G)) (not (bvsge D E))) (INV3 A G H D E F)) (not (bvsge I J))) (not (bvsge K L))) (INV2 K L M I J N)) (not (bvsge O P))) (not (bvsge Q R))) (INV1 O P S Q R T)) (= U V)) (INV3 A B C D E F))))
(assert (not (exists ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)) (O (_ BitVec 32)) (P (_ BitVec 32)) (Q (_ BitVec 32)) (R (_ BitVec 32)) (S (_ BitVec 32)) (T (_ BitVec 32)))(and (and (and (and (and (and (and (and (and (and (not (= A B)) (not (bvsge C D))) (not (bvsge E F))) (INV3 C D A E F B)) (not (bvsge G H))) (not (bvsge I J))) (INV2 I J K G H L)) (not (bvsge M N))) (not (bvsge O P))) (INV1 M N Q O P R)) (= S T)))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)) (O (_ BitVec 32)) (P (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (= (bvmul (bvneg (_ bv1 32)) B) (bvneg (_ bv1 32))) (= (bvmul (bvneg (_ bv1 32)) E) (bvneg (_ bv1 32)))) (not (bvsge D G))) (not (bvsge A H))) (INV2 A H C D G F)) (not (bvsge I J))) (not (bvsge K L))) (INV1 I J M K L N)) (= O P)) (INV3 A B C D E F))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)))(=> (and (and (and (and (and (= (bvmul (bvneg (_ bv1 32)) B) (_ bv0 32)) (= (bvmul (bvneg (_ bv1 32)) E) (bvneg (_ bv1 32)))) (not (bvsge A G))) (not (bvsge D H))) (INV1 A G C D H F)) (= I J)) (INV2 A B C D E F))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)))(=> (and (and (and (and (= (bvmul (bvneg (_ bv1 32)) B) (bvneg (_ bv1 32))) (= (bvmul (bvneg (_ bv1 32)) C) (bvneg (_ bv1 32)))) (= (bvmul (bvneg (_ bv1 32)) E) (bvneg (_ bv1 32)))) (= (bvmul (bvneg (_ bv1 32)) F) (bvneg (_ bv1 32)))) (= A D)) (INV1 A B C D E F))))
(check-sat)
