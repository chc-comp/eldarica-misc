(set-info :origin "NTS benchmark converted to SMT-LIB2 using Eldarica (http://lara.epfl.ch/w/eldarica)")
(set-logic HORN)
(declare-fun INV3 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun INV4 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun INV1 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun INV2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)))(=> (and (and (and (and (and (and (and (= (bvadd G (_ bv1 32)) E) (= (bvadd H (_ bv2 32)) F)) (not (bvsge A B))) (bvsge (bvadd (bvsub D G) (bvneg (_ bv1 32))) (_ bv0 32))) (INV3 A B C D G H)) (bvsge (bvadd (bvsub (_ bv1 32) I) (bvneg (_ bv1 32))) (_ bv0 32))) (not (bvsge (bvadd (bvsub (_ bv1 32) J) (bvneg (_ bv1 32))) (_ bv0 32)))) (= J I)) (INV3 A B C D E F))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (and (= (bvadd G (_ bv1 32)) B) (= (bvadd H (_ bv2 32)) C)) (= (bvadd I (_ bv1 32)) E)) (= (bvadd J (_ bv2 32)) F)) (bvsge A G)) (bvsge (bvadd (bvsub D I) (bvneg (_ bv1 32))) (_ bv0 32))) (INV3 A G H D I J)) (bvsge (bvadd (bvsub (_ bv1 32) K) (bvneg (_ bv1 32))) (_ bv0 32))) (not (bvsge (bvadd (bvsub (_ bv1 32) L) (bvneg (_ bv1 32))) (_ bv0 32)))) (= L K)) (INV3 A B C D E F))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)))(=> (and (and (and (and (and (and (and (= (bvadd G (_ bv1 32)) B) (= (bvadd H (_ bv2 32)) C)) (bvsge A G)) (not (bvsge (bvadd (bvsub D E) (bvneg (_ bv1 32))) (_ bv0 32)))) (INV3 A G H D E F)) (bvsge (bvadd (bvsub (_ bv1 32) I) (bvneg (_ bv1 32))) (_ bv0 32))) (not (bvsge (bvadd (bvsub (_ bv1 32) J) (bvneg (_ bv1 32))) (_ bv0 32)))) (= J I)) (INV3 A B C D E F))))
(assert (not (exists ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)))(and (and (and (and (and (and (not (= A B)) (not (bvsge C D))) (not (bvsge (bvadd (bvsub E F) (bvneg (_ bv1 32))) (_ bv0 32)))) (INV3 C D A E F B)) (bvsge (bvadd (bvsub (_ bv1 32) G) (bvneg (_ bv1 32))) (_ bv0 32))) (not (bvsge (bvadd (bvsub (_ bv1 32) H) (bvneg (_ bv1 32))) (_ bv0 32)))) (= H G)))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)))(=> (and (and (and (and (and (and (and (= (bvmul (bvneg (_ bv1 32)) B) (bvneg (_ bv1 32))) (= (bvmul (bvneg (_ bv1 32)) C) (_ bv0 32))) (= (bvmul (bvneg (_ bv1 32)) D) (bvneg (_ bv1 32)))) (= (bvmul (bvneg (_ bv1 32)) E) (bvneg (_ bv1 32)))) (= (bvmul (bvneg (_ bv1 32)) F) (bvneg (_ bv2 32)))) (bvsge (bvadd (bvsub (_ bv1 32) G) (bvneg (_ bv1 32))) (_ bv0 32))) (not (bvsge (bvadd (bvsub (_ bv1 32) A) (bvneg (_ bv1 32))) (_ bv0 32)))) (= A G)) (INV3 A B C D E F))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)))(=> (and (and (and (and (and (and (and (= (bvadd G (_ bv1 32)) E) (= (bvadd H (_ bv2 32)) F)) (not (bvsge A B))) (bvsge (bvadd (bvsub D G) (bvneg (_ bv1 32))) (_ bv0 32))) (INV4 A B C D G H)) (not (bvsge (bvadd (bvsub (_ bv1 32) I) (bvneg (_ bv1 32))) (_ bv0 32)))) (not (bvsge (bvadd (bvsub (_ bv1 32) J) (bvneg (_ bv1 32))) (_ bv0 32)))) (= J I)) (INV4 A B C D E F))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (and (= (bvadd G (_ bv1 32)) B) (= (bvadd H (_ bv2 32)) C)) (= (bvadd I (_ bv1 32)) E)) (= (bvadd J (_ bv2 32)) F)) (bvsge A G)) (bvsge (bvadd (bvsub D I) (bvneg (_ bv1 32))) (_ bv0 32))) (INV4 A G H D I J)) (not (bvsge (bvadd (bvsub (_ bv1 32) K) (bvneg (_ bv1 32))) (_ bv0 32)))) (not (bvsge (bvadd (bvsub (_ bv1 32) L) (bvneg (_ bv1 32))) (_ bv0 32)))) (= L K)) (INV4 A B C D E F))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)))(=> (and (and (and (and (and (and (and (= (bvadd G (_ bv1 32)) B) (= (bvadd H (_ bv2 32)) C)) (bvsge A G)) (not (bvsge (bvadd (bvsub D E) (bvneg (_ bv1 32))) (_ bv0 32)))) (INV4 A G H D E F)) (not (bvsge (bvadd (bvsub (_ bv1 32) I) (bvneg (_ bv1 32))) (_ bv0 32)))) (not (bvsge (bvadd (bvsub (_ bv1 32) J) (bvneg (_ bv1 32))) (_ bv0 32)))) (= J I)) (INV4 A B C D E F))))
(assert (not (exists ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)))(and (and (and (and (and (and (not (= A B)) (not (bvsge C D))) (not (bvsge (bvadd (bvsub E F) (bvneg (_ bv1 32))) (_ bv0 32)))) (INV4 C D A E F B)) (not (bvsge (bvadd (bvsub (_ bv1 32) G) (bvneg (_ bv1 32))) (_ bv0 32)))) (not (bvsge (bvadd (bvsub (_ bv1 32) H) (bvneg (_ bv1 32))) (_ bv0 32)))) (= H G)))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)))(=> (and (and (and (and (and (and (= (bvmul (bvneg (_ bv1 32)) B) (bvneg (_ bv1 32))) (= (bvmul (bvneg (_ bv1 32)) C) (_ bv0 32))) (= (bvmul (bvneg (_ bv1 32)) E) (bvneg (_ bv1 32)))) (= (bvmul (bvneg (_ bv1 32)) F) (bvneg (_ bv2 32)))) (not (bvsge (bvadd (bvsub (_ bv1 32) D) (bvneg (_ bv1 32))) (_ bv0 32)))) (not (bvsge (bvadd (bvsub (_ bv1 32) A) (bvneg (_ bv1 32))) (_ bv0 32)))) (= A D)) (INV4 A B C D E F))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)))(=> (and (and (and (and (and (and (and (= (bvadd G (_ bv1 32)) E) (= (bvadd H (_ bv2 32)) F)) (not (bvsge A B))) (bvsge (bvadd (bvsub D G) (bvneg (_ bv1 32))) (_ bv0 32))) (INV1 A B C D G H)) (bvsge (bvadd (bvsub (_ bv1 32) I) (bvneg (_ bv1 32))) (_ bv0 32))) (bvsge (bvadd (bvsub (_ bv1 32) J) (bvneg (_ bv1 32))) (_ bv0 32))) (= J I)) (INV1 A B C D E F))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (and (= (bvadd G (_ bv1 32)) B) (= (bvadd H (_ bv2 32)) C)) (= (bvadd I (_ bv1 32)) E)) (= (bvadd J (_ bv2 32)) F)) (bvsge A G)) (bvsge (bvadd (bvsub D I) (bvneg (_ bv1 32))) (_ bv0 32))) (INV1 A G H D I J)) (bvsge (bvadd (bvsub (_ bv1 32) K) (bvneg (_ bv1 32))) (_ bv0 32))) (bvsge (bvadd (bvsub (_ bv1 32) L) (bvneg (_ bv1 32))) (_ bv0 32))) (= L K)) (INV1 A B C D E F))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)))(=> (and (and (and (and (and (and (and (= (bvadd G (_ bv1 32)) B) (= (bvadd H (_ bv2 32)) C)) (bvsge A G)) (not (bvsge (bvadd (bvsub D E) (bvneg (_ bv1 32))) (_ bv0 32)))) (INV1 A G H D E F)) (bvsge (bvadd (bvsub (_ bv1 32) I) (bvneg (_ bv1 32))) (_ bv0 32))) (bvsge (bvadd (bvsub (_ bv1 32) J) (bvneg (_ bv1 32))) (_ bv0 32))) (= J I)) (INV1 A B C D E F))))
(assert (not (exists ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)))(and (and (and (and (and (and (not (= A B)) (not (bvsge C D))) (not (bvsge (bvadd (bvsub E F) (bvneg (_ bv1 32))) (_ bv0 32)))) (INV1 C D A E F B)) (bvsge (bvadd (bvsub (_ bv1 32) G) (bvneg (_ bv1 32))) (_ bv0 32))) (bvsge (bvadd (bvsub (_ bv1 32) H) (bvneg (_ bv1 32))) (_ bv0 32))) (= H G)))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (= (bvmul (bvneg (_ bv1 32)) A) (bvneg (_ bv1 32))) (= (bvmul (bvneg (_ bv1 32)) B) (bvneg (_ bv1 32)))) (= (bvmul (bvneg (_ bv1 32)) C) (_ bv0 32))) (= (bvmul (bvneg (_ bv1 32)) D) (bvneg (_ bv1 32)))) (= (bvmul (bvneg (_ bv1 32)) E) (bvneg (_ bv1 32)))) (= (bvmul (bvneg (_ bv1 32)) F) (bvneg (_ bv2 32)))) (bvsge (bvadd (bvsub (_ bv1 32) G) (bvneg (_ bv1 32))) (_ bv0 32))) (bvsge (bvadd (bvsub (_ bv1 32) H) (bvneg (_ bv1 32))) (_ bv0 32))) (= H G)) (INV1 A B C D E F))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)))(=> (and (and (and (and (and (and (and (= (bvadd G (_ bv1 32)) E) (= (bvadd H (_ bv2 32)) F)) (not (bvsge A B))) (bvsge (bvadd (bvsub D G) (bvneg (_ bv1 32))) (_ bv0 32))) (INV2 A B C D G H)) (not (bvsge (bvadd (bvsub (_ bv1 32) I) (bvneg (_ bv1 32))) (_ bv0 32)))) (bvsge (bvadd (bvsub (_ bv1 32) J) (bvneg (_ bv1 32))) (_ bv0 32))) (= J I)) (INV2 A B C D E F))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (and (= (bvadd G (_ bv1 32)) B) (= (bvadd H (_ bv2 32)) C)) (= (bvadd I (_ bv1 32)) E)) (= (bvadd J (_ bv2 32)) F)) (bvsge A G)) (bvsge (bvadd (bvsub D I) (bvneg (_ bv1 32))) (_ bv0 32))) (INV2 A G H D I J)) (not (bvsge (bvadd (bvsub (_ bv1 32) K) (bvneg (_ bv1 32))) (_ bv0 32)))) (bvsge (bvadd (bvsub (_ bv1 32) L) (bvneg (_ bv1 32))) (_ bv0 32))) (= L K)) (INV2 A B C D E F))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)))(=> (and (and (and (and (and (and (and (= (bvadd G (_ bv1 32)) B) (= (bvadd H (_ bv2 32)) C)) (bvsge A G)) (not (bvsge (bvadd (bvsub D E) (bvneg (_ bv1 32))) (_ bv0 32)))) (INV2 A G H D E F)) (not (bvsge (bvadd (bvsub (_ bv1 32) I) (bvneg (_ bv1 32))) (_ bv0 32)))) (bvsge (bvadd (bvsub (_ bv1 32) J) (bvneg (_ bv1 32))) (_ bv0 32))) (= J I)) (INV2 A B C D E F))))
(assert (not (exists ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)))(and (and (and (and (and (and (not (= A B)) (not (bvsge C D))) (not (bvsge (bvadd (bvsub E F) (bvneg (_ bv1 32))) (_ bv0 32)))) (INV2 C D A E F B)) (not (bvsge (bvadd (bvsub (_ bv1 32) G) (bvneg (_ bv1 32))) (_ bv0 32)))) (bvsge (bvadd (bvsub (_ bv1 32) H) (bvneg (_ bv1 32))) (_ bv0 32))) (= H G)))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)))(=> (and (and (and (and (and (and (and (= (bvmul (bvneg (_ bv1 32)) A) (bvneg (_ bv1 32))) (= (bvmul (bvneg (_ bv1 32)) B) (bvneg (_ bv1 32)))) (= (bvmul (bvneg (_ bv1 32)) C) (_ bv0 32))) (= (bvmul (bvneg (_ bv1 32)) E) (bvneg (_ bv1 32)))) (= (bvmul (bvneg (_ bv1 32)) F) (bvneg (_ bv2 32)))) (not (bvsge (bvadd (bvsub (_ bv1 32) D) (bvneg (_ bv1 32))) (_ bv0 32)))) (bvsge (bvadd (bvsub (_ bv1 32) G) (bvneg (_ bv1 32))) (_ bv0 32))) (= G D)) (INV2 A B C D E F))))
(check-sat)
