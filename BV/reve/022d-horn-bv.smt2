(set-info :origin "NTS benchmark converted to SMT-LIB2 using Eldarica (http://lara.epfl.ch/w/eldarica)")
(set-logic HORN)
(declare-fun INV1 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun INV3 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun INV2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun INV4 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)))(=> (and (and (and (and (and (and (= (bvadd D (bvneg (_ bv2 32))) B) (= (bvadd E (_ bv1 32)) C)) (not (bvsge (bvadd (bvsub F G) (bvneg (_ bv1 32))) (_ bv0 32)))) (bvsge (bvadd (bvsub A E) (bvneg (_ bv1 32))) (_ bv0 32))) (INV1 F H G A D E I J K L)) (= I K)) (= J L)) (INV3 A B C))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)))(=> (and (and (and (and (and (and (not (bvsge (bvadd (bvsub F D) (bvneg (_ bv1 32))) (_ bv0 32))) (INV3 D E F)) (not (bvsge (bvadd (bvsub A C) (bvneg (_ bv1 32))) (_ bv0 32)))) (bvsge (bvadd (bvsub K L) (bvneg (_ bv1 32))) (_ bv0 32))) (INV1 A B C K M L G H I J)) (= G I)) (= H J)) (INV1 A B C D E F G H I J))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)) (O (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (= (bvadd D (_ bv1 32)) A) (= (bvadd E (_ bv2 32)) B)) (bvsge (bvadd (bvsub C D) (bvneg (_ bv1 32))) (_ bv0 32))) (INV3 D E C)) (not (bvsge (bvadd (bvsub F G) (bvneg (_ bv1 32))) (_ bv0 32)))) (bvsge (bvadd (bvsub H I) (bvneg (_ bv1 32))) (_ bv0 32))) (INV1 F J G H K I L M N O)) (= L N)) (= M O)) (INV3 A B C))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (= (bvadd (bvadd K (bvneg (_ bv2 32))) (_ bv1 32)) B) (= (bvadd L (_ bv1 32)) C)) (= (bvadd M (bvneg (_ bv2 32))) E)) (= (bvadd N (_ bv1 32)) F)) (bvsge (bvadd (bvsub A L) (bvneg (_ bv1 32))) (_ bv0 32))) (bvsge (bvadd (bvsub D N) (bvneg (_ bv1 32))) (_ bv0 32))) (INV1 A K L D M N G H I J)) (= G I)) (= H J)) (INV2 A B C D E F G H I J))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)) (O (_ BitVec 32)) (P (_ BitVec 32)))(=> (and (and (and (and (and (and (and (not (bvsge (bvadd (bvsub F D) (bvneg (_ bv1 32))) (_ bv0 32))) (not (bvsge (bvadd (bvsub C A) (bvneg (_ bv1 32))) (_ bv0 32)))) (INV2 A B C D E F G H I J)) (bvsge (bvadd (bvsub K L) (bvneg (_ bv1 32))) (_ bv0 32))) (bvsge (bvadd (bvsub M N) (bvneg (_ bv1 32))) (_ bv0 32))) (INV1 K O L M P N G H I J)) (= G I)) (= H J)) (INV1 A B C D E F G H I J))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)) (O (_ BitVec 32)) (P (_ BitVec 32)) (Q (_ BitVec 32)) (R (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (and (= (bvadd K (_ bv1 32)) D) (= (bvadd L (_ bv2 32)) E)) (bvsge (bvadd (bvsub F K) (bvneg (_ bv1 32))) (_ bv0 32))) (not (bvsge (bvadd (bvsub C A) (bvneg (_ bv1 32))) (_ bv0 32)))) (INV2 A B C K L F G H I J)) (bvsge (bvadd (bvsub M N) (bvneg (_ bv1 32))) (_ bv0 32))) (bvsge (bvadd (bvsub O P) (bvneg (_ bv1 32))) (_ bv0 32))) (INV1 M Q N O R P G H I J)) (= G I)) (= H J)) (INV2 A B C D E F G H I J))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)) (O (_ BitVec 32)) (P (_ BitVec 32)) (Q (_ BitVec 32)) (R (_ BitVec 32)) (S (_ BitVec 32)) (T (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (and (and (and (= (bvadd (bvadd K (_ bv2 32)) (bvneg (_ bv1 32))) A) (= (bvadd L (_ bv1 32)) B)) (= (bvadd M (_ bv1 32)) D)) (= (bvadd N (_ bv2 32)) E)) (bvsge (bvadd (bvsub F M) (bvneg (_ bv1 32))) (_ bv0 32))) (bvsge (bvadd (bvsub C K) (bvneg (_ bv1 32))) (_ bv0 32))) (INV2 K L C M N F G H I J)) (bvsge (bvadd (bvsub O P) (bvneg (_ bv1 32))) (_ bv0 32))) (bvsge (bvadd (bvsub Q R) (bvneg (_ bv1 32))) (_ bv0 32))) (INV1 O S P Q T R G H I J)) (= G I)) (= H J)) (INV2 A B C D E F G H I J))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)) (O (_ BitVec 32)) (P (_ BitVec 32)) (Q (_ BitVec 32)) (R (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (and (= (bvadd (bvadd K (_ bv2 32)) (bvneg (_ bv1 32))) A) (= (bvadd L (_ bv1 32)) B)) (not (bvsge (bvadd (bvsub F D) (bvneg (_ bv1 32))) (_ bv0 32)))) (bvsge (bvadd (bvsub C K) (bvneg (_ bv1 32))) (_ bv0 32))) (INV2 K L C D E F G H I J)) (bvsge (bvadd (bvsub M N) (bvneg (_ bv1 32))) (_ bv0 32))) (bvsge (bvadd (bvsub O P) (bvneg (_ bv1 32))) (_ bv0 32))) (INV1 M Q N O R P G H I J)) (= G I)) (= H J)) (INV2 A B C D E F G H I J))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)) (N (_ BitVec 32)) (O (_ BitVec 32)))(=> (and (and (and (and (and (and (and (and (= (bvadd (bvadd D (_ bv2 32)) (bvneg (_ bv1 32))) A) (= (bvadd E (_ bv1 32)) B)) (bvsge (bvadd (bvsub C D) (bvneg (_ bv1 32))) (_ bv0 32))) (INV4 D E C)) (bvsge (bvadd (bvsub F G) (bvneg (_ bv1 32))) (_ bv0 32))) (not (bvsge (bvadd (bvsub H I) (bvneg (_ bv1 32))) (_ bv0 32)))) (INV1 F J G H K I L M N O)) (= L N)) (= M O)) (INV4 A B C))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)) (M (_ BitVec 32)))(=> (and (and (and (and (and (and (not (bvsge (bvadd (bvsub C A) (bvneg (_ bv1 32))) (_ bv0 32))) (INV4 A B C)) (bvsge (bvadd (bvsub K L) (bvneg (_ bv1 32))) (_ bv0 32))) (not (bvsge (bvadd (bvsub D F) (bvneg (_ bv1 32))) (_ bv0 32)))) (INV1 K M L D E F G H I J)) (= G I)) (= H J)) (INV1 A B C D E F G H I J))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)) (K (_ BitVec 32)) (L (_ BitVec 32)))(=> (and (and (and (and (and (and (= (bvadd (bvadd D (bvneg (_ bv2 32))) (_ bv1 32)) B) (= (bvadd E (_ bv1 32)) C)) (bvsge (bvadd (bvsub A E) (bvneg (_ bv1 32))) (_ bv0 32))) (not (bvsge (bvadd (bvsub F G) (bvneg (_ bv1 32))) (_ bv0 32)))) (INV1 A D E F H G I J K L)) (= I K)) (= J L)) (INV4 A B C))))
(assert (not (exists ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)) (J (_ BitVec 32)))(and (and (and (and (and (not (= A B)) (not (bvsge (bvadd (bvsub C D) (bvneg (_ bv1 32))) (_ bv0 32)))) (not (bvsge (bvadd (bvsub E F) (bvneg (_ bv1 32))) (_ bv0 32)))) (INV1 C A D E B F G H I J)) (= G I)) (= H J)))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)))(=> (and (and (and (= (bvmul (bvneg (_ bv1 32)) C) (_ bv0 32)) (= (bvmul (bvneg (_ bv1 32)) F) (_ bv0 32))) (= A D)) (= B E)) (INV1 A B C D E F A B D E))))
(check-sat)
