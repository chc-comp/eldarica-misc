(set-info :origin "NTS benchmark converted to SMT-LIB2 using Eldarica (http://lara.epfl.ch/w/eldarica)")
(set-logic HORN)
(declare-fun INV1 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)))(=> (and (and (and (and (= (bvadd G (_ bv1 32)) D) (not (bvsle B (_ bv10 32)))) (bvsle G (_ bv10 32))) (INV1 A B C G E F)) (= E F)) (INV1 A B C D E F))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)))(=> (and (and (and (and (and (= (bvadd G (_ bv1 32)) B) (= (bvadd H (_ bv1 32)) D)) (bvsle G (_ bv10 32))) (bvsle H (_ bv10 32))) (INV1 A G C H E F)) (= E F)) (INV1 A B C D E F))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)))(=> (and (and (and (and (= (bvadd G (_ bv1 32)) B) (bvsle G (_ bv10 32))) (not (bvsle D (_ bv10 32)))) (INV1 A G C D E F)) (= E F)) (INV1 A B C D E F))))
(assert (not (exists ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)))(and (and (and (and (not (= A B)) (not (bvsle A (_ bv10 32)))) (not (bvsle B (_ bv10 32)))) (INV1 C A D B E F)) (= E F)))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)))(=> (and (and (= (bvmul (bvneg (_ bv1 32)) B) (_ bv0 32)) (= (bvmul (bvneg (_ bv1 32)) D) (bvneg (_ bv1 32)))) (= A C)) (INV1 A B C D A C))))
(check-sat)
