(set-info :origin "NTS benchmark converted to SMT-LIB2 using Eldarica (http://lara.epfl.ch/w/eldarica)")
(set-logic HORN)
(declare-fun REC_g_g ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun REC__g ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun REC_g_ ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (not (exists ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)))(and (and (and (not (= A B)) (= (bvmul (bvneg (_ bv1 32)) C) (_ bv0 32))) (REC_g_g D A E C B)) (= D E)))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)))(=> (and (and (and (and (and (= (bvmul (bvneg (_ bv1 32)) B) (_ bv0 32)) (= (bvadd C (bvneg (_ bv1 32))) F)) (= (bvadd C D) G)) (REC__g F G E)) (not (bvsle C (_ bv0 32)))) (bvsle A (_ bv0 32))) (REC_g_g A B C D E))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)))(=> (and (and (= (bvmul (bvneg (_ bv1 32)) B) (_ bv0 32)) (bvsle C (_ bv0 32))) (bvsle A (_ bv0 32))) (REC_g_g A B C D D))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)) (G (_ BitVec 32)) (H (_ BitVec 32)) (I (_ BitVec 32)))(=> (and (and (and (and (and (and (= (bvadd A F) B) (= (bvadd A (bvneg (_ bv1 32))) G)) (= (bvadd C (bvneg (_ bv1 32))) H)) (= (bvadd C D) I)) (REC_g_g G F H I E)) (not (bvsle C (_ bv0 32)))) (not (bvsle A (_ bv0 32)))) (REC_g_g A B C D E))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)) (F (_ BitVec 32)))(=> (and (and (and (and (= (bvadd A E) B) (= (bvadd A (bvneg (_ bv1 32))) F)) (REC_g_ F E)) (bvsle C (_ bv0 32))) (not (bvsle A (_ bv0 32)))) (REC_g_g A B C D D))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)))(=> (and (= (bvmul (bvneg (_ bv1 32)) B) (_ bv0 32)) (bvsle A (_ bv0 32))) (REC_g_ A B))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)))(=> (and (and (and (= (bvadd A C) B) (= (bvadd A (bvneg (_ bv1 32))) D)) (REC_g_ D C)) (not (bvsle A (_ bv0 32)))) (REC_g_ A B))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)))(=> (bvsle A (_ bv0 32)) (REC__g A B B))))
(assert (forall ((A (_ BitVec 32)) (B (_ BitVec 32)) (C (_ BitVec 32)) (D (_ BitVec 32)) (E (_ BitVec 32)))(=> (and (and (and (= (bvadd A (bvneg (_ bv1 32))) D) (= (bvadd A B) E)) (REC__g D E C)) (not (bvsle A (_ bv0 32)))) (REC__g A B C))))
(check-sat)
